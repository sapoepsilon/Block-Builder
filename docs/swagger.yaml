definitions:
  docker.Container:
    properties:
      created:
        type: integer
      id:
        type: string
      image:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      networkMode:
        type: string
      ports:
        items:
          $ref: '#/definitions/docker.Port'
        type: array
      state:
        type: string
      status:
        type: string
    type: object
  docker.Port:
    properties:
      privatePort:
        type: integer
      publicPort:
        type: integer
      type:
        type: string
    type: object
  handlers.CreateContainerRequest:
    description: Request body for creating a new container from a Node.js project
    properties:
      cpuShares:
        description: CPU shares (relative weight)
        example: 1024
        type: integer
      env:
        description: Environment variables for the Node.js application
        example:
        - NODE_ENV=production
        - PORT=3000
        items:
          type: string
        type: array
      labels:
        additionalProperties:
          type: string
        description: Docker container labels
        example:
          environment: production
        type: object
      memoryLimit:
        description: Memory limit in bytes
        example: 536870912
        type: integer
      name:
        description: Name for the container
        example: my-nodejs-app
        type: string
      networkMode:
        description: Docker network mode
        example: bridge
        type: string
      projectPath:
        description: Path to the Node.js project containing package.json
        example: /path/to/nodejs/project
        type: string
    required:
    - name
    - projectPath
    type: object
  handlers.ErrorResponse:
    properties:
      details:
        type: string
      error:
        type: string
    type: object
info:
  contact: {}
paths:
  /containers:
    get:
      description: Get a list of all containers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/docker.Container'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: List all containers
      tags:
      - containers
  /containers/{id}:
    delete:
      description: Delete a container by ID
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a container
      tags:
      - containers
    get:
      description: Get detailed information about a container
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/docker.Container'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get container by ID
      tags:
      - containers
  /containers/{id}/logs:
    get:
      description: Get logs from a container
      parameters:
      - description: Container ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: Container logs
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get container logs
      tags:
      - containers
  /containers/create:
    post:
      description: |
        Creates a new container from a Node.js project. The system will:
        - Validate the Node.js project structure
        - Generate a Dockerfile automatically
        - Configure the container with Node.js best practices
        
        Requirements:
        - Project must contain a valid package.json with name and version fields
        - Container will expose port 3000 by default
        - Container will use 'npm start' as the entry command
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - description: Node.js container configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateContainerRequest'
      responses:
        "201":
          description: Container created successfully
          schema:
            properties:
              containerId:
                type: string
            type: object
        "400":
          description: Invalid request or invalid Node.js project structure
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Server error or Docker operation failed
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new Node.js container
      tags:
      - containers
swagger: "2.0"
